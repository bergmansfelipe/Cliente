//
// Created by the DataSnap proxy generator.
// 12/12/2014 13:03:02
//

unit Unit1;

interface

uses Data.DBXCommon, Data.DBXClient, Data.DBXDataSnap, Data.DBXJSON, Datasnap.DSProxy, System.Classes, System.SysUtils, Data.DB, Data.SqlExpr, Data.DBXDBReaders, Data.DBXCDSReaders, Data.DBXJSONReflect;

type
  TServerMethods2Client = class(TDSAdminClient)
  private
    FEchoStringCommand: TDBXCommand;
    FupdateReverseStringCommand: TDBXCommand;
    FupdateUsuarioLogarCommand: TDBXCommand;
    FupdateUsuarioLogadoCommand: TDBXCommand;
  public
    constructor Create(ADBXConnection: TDBXConnection); overload;
    constructor Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    function EchoString(Value: string): string;
    function updateReverseString(Value: string): string;
    function updateUsuarioLogar(Conta: string): string;
    function updateUsuarioLogado(Conta: string; Usuario: string): string;
  end;

  TConexaoClient = class(TDSAdminClient)
  private
    FGetConnectionCommand: TDBXCommand;
    FGetParamsCommand: TDBXCommand;
    FBdConectarCommand: TDBXCommand;
  public
    constructor Create(ADBXConnection: TDBXConnection); overload;
    constructor Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    function GetConnection: TSQLConnection;
    function GetParams: string;
    procedure BdConectar(Conta: string);
  end;

  TDMClient = class(TDSAdminClient)
  private
  public
    constructor Create(ADBXConnection: TDBXConnection); overload;
    constructor Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
  end;

implementation

function TServerMethods2Client.EchoString(Value: string): string;
begin
  if FEchoStringCommand = nil then
  begin
    FEchoStringCommand := FDBXConnection.CreateCommand;
    FEchoStringCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FEchoStringCommand.Text := 'TServerMethods2.EchoString';
    FEchoStringCommand.Prepare;
  end;
  FEchoStringCommand.Parameters[0].Value.SetWideString(Value);
  FEchoStringCommand.ExecuteUpdate;
  Result := FEchoStringCommand.Parameters[1].Value.GetWideString;
end;

function TServerMethods2Client.updateReverseString(Value: string): string;
begin
  if FupdateReverseStringCommand = nil then
  begin
    FupdateReverseStringCommand := FDBXConnection.CreateCommand;
    FupdateReverseStringCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FupdateReverseStringCommand.Text := 'TServerMethods2.updateReverseString';
    FupdateReverseStringCommand.Prepare;
  end;
  FupdateReverseStringCommand.Parameters[0].Value.SetWideString(Value);
  FupdateReverseStringCommand.ExecuteUpdate;
  Result := FupdateReverseStringCommand.Parameters[1].Value.GetWideString;
end;

function TServerMethods2Client.updateUsuarioLogar(Conta: string): string;
begin
  if FupdateUsuarioLogarCommand = nil then
  begin
    FupdateUsuarioLogarCommand := FDBXConnection.CreateCommand;
    FupdateUsuarioLogarCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FupdateUsuarioLogarCommand.Text := 'TServerMethods2.updateUsuarioLogar';
    FupdateUsuarioLogarCommand.Prepare;
  end;
  FupdateUsuarioLogarCommand.Parameters[0].Value.SetWideString(Conta);
  FupdateUsuarioLogarCommand.ExecuteUpdate;
  Result := FupdateUsuarioLogarCommand.Parameters[1].Value.GetWideString;
end;

function TServerMethods2Client.updateUsuarioLogado(Conta: string; Usuario: string): string;
begin
  if FupdateUsuarioLogadoCommand = nil then
  begin
    FupdateUsuarioLogadoCommand := FDBXConnection.CreateCommand;
    FupdateUsuarioLogadoCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FupdateUsuarioLogadoCommand.Text := 'TServerMethods2.updateUsuarioLogado';
    FupdateUsuarioLogadoCommand.Prepare;
  end;
  FupdateUsuarioLogadoCommand.Parameters[0].Value.SetWideString(Conta);
  FupdateUsuarioLogadoCommand.Parameters[1].Value.SetWideString(Usuario);
  FupdateUsuarioLogadoCommand.ExecuteUpdate;
  Result := FupdateUsuarioLogadoCommand.Parameters[2].Value.GetWideString;
end;


constructor TServerMethods2Client.Create(ADBXConnection: TDBXConnection);
begin
  inherited Create(ADBXConnection);
end;


constructor TServerMethods2Client.Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ADBXConnection, AInstanceOwner);
end;


destructor TServerMethods2Client.Destroy;
begin
  FreeAndNil(FEchoStringCommand);
  FreeAndNil(FupdateReverseStringCommand);
  FreeAndNil(FupdateUsuarioLogarCommand);
  FreeAndNil(FupdateUsuarioLogadoCommand);
  inherited;
end;

function TConexaoClient.GetConnection: TSQLConnection;
begin
  if FGetConnectionCommand = nil then
  begin
    FGetConnectionCommand := FDBXConnection.CreateCommand;
    FGetConnectionCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FGetConnectionCommand.Text := 'TConexao.GetConnection';
    FGetConnectionCommand.Prepare;
  end;
  FGetConnectionCommand.ExecuteUpdate;
  if not FGetConnectionCommand.Parameters[0].Value.IsNull then
  begin
    FUnMarshal := TDBXClientCommand(FGetConnectionCommand.Parameters[0].ConnectionHandler).GetJSONUnMarshaler;
    try
      Result := TSQLConnection(FUnMarshal.UnMarshal(FGetConnectionCommand.Parameters[0].Value.GetJSONValue(True)));
      if FInstanceOwner then
        FGetConnectionCommand.FreeOnExecute(Result);
    finally
      FreeAndNil(FUnMarshal)
    end
  end
  else
    Result := nil;
end;

function TConexaoClient.GetParams: string;
begin
  if FGetParamsCommand = nil then
  begin
    FGetParamsCommand := FDBXConnection.CreateCommand;
    FGetParamsCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FGetParamsCommand.Text := 'TConexao.GetParams';
    FGetParamsCommand.Prepare;
  end;
  FGetParamsCommand.ExecuteUpdate;
  Result := FGetParamsCommand.Parameters[0].Value.GetWideString;
end;

procedure TConexaoClient.BdConectar(Conta: string);
begin
  if FBdConectarCommand = nil then
  begin
    FBdConectarCommand := FDBXConnection.CreateCommand;
    FBdConectarCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FBdConectarCommand.Text := 'TConexao.BdConectar';
    FBdConectarCommand.Prepare;
  end;
  FBdConectarCommand.Parameters[0].Value.SetWideString(Conta);
  FBdConectarCommand.ExecuteUpdate;
end;


constructor TConexaoClient.Create(ADBXConnection: TDBXConnection);
begin
  inherited Create(ADBXConnection);
end;


constructor TConexaoClient.Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ADBXConnection, AInstanceOwner);
end;


destructor TConexaoClient.Destroy;
begin
  FreeAndNil(FGetConnectionCommand);
  FreeAndNil(FGetParamsCommand);
  FreeAndNil(FBdConectarCommand);
  inherited;
end;


constructor TDMClient.Create(ADBXConnection: TDBXConnection);
begin
  inherited Create(ADBXConnection);
end;


constructor TDMClient.Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ADBXConnection, AInstanceOwner);
end;


destructor TDMClient.Destroy;
begin
  inherited;
end;

end.

